# - Config file for the CLHEP package
# It defines the following variables
#  CLHEP_INCLUDE_DIRS - include directories for CLHEP
#  CLHEP_DEFINITIONS  - compile definitions needed to use CLHEP
#  CLHEP_LIBRARIES    - libraries to link against
#
# You may supply a version number through find_package which will be checked
# against the version of this build. Standard CMake logic is used so that
# the EXACT flag may be passed, and otherwise this build will report itself
# as compatible with the requested version if:
#
#  VERSION_OF_THIS_BUILD >= VERSION_REQUESTED
#
# CLHEP is built concurrently as a complete library and as a set of
# component libraries. In each case, shared and static variants are
# always built. By default, this module populates CLHEP_LIBRARIES with
# the single,shared library. Thus
#
#  find_package(CLHEP)
#
#  include_directories(${CLHEP_INCLUDE_DIRS})
#  add_executable(MyProgram ...sources...)
#  target_link_libraries(MyProgram ${CLHEP_LIBRARIES})
#
# would link 'MyProgram' with the complete, shared CLHEP library
#
# By passing 'COMPONENT' arguments to find_package, you may select between
# static, shared and component libraries. For example, to select linking
# with the complete, static CLHEP library:
#
#  find_package(CLHEP REQUIRED static)
#
# This will populate CLHEP_LIBRARIES with the requested static variant.
# To select CLHEP component libraries, pass their names as COMPONENT
# arguments. For example:
#
#  find_package(CLHEP REQUIRED Vector Matrix)
#
# would populate CLHEP_LIBRARIES with the shared variants of the Vector
# and Matrix component libraries. Note that CMake will take care of
# any dependencies between components at the linking stage, so you only
# need to list those you wish to use directly. Static component libraries
# may also be selected by using the same `static` component name, so that
#
#  find_package(CLHEP REQUIRED static Vector Matrix)
#
# would populate CLHEP_LIBRARIES with the shared variants of the Vector
# and Matrix component libraries. Note that the order of component
# arguments does not matter, so
#
#  find_package(CLHEP REQUIRED Vector static Matrix)
#
# would work just as well. Mixtures of static and shared components are
# not allowed. The complete list of CLHEP component names which may be
# passed is:
#
#  Vector             CLHEP Vector component library (SHARED)
#  Evaluator          CLHEP Evaluator component library (SHARED)
#  GenericFunctions   CLHEP GenericFunctions component library (SHARED)
#  Geometry           CLHEP Geometry component library (SHARED)
#  Random             CLHEP Random component library (SHARED)
#  Matrix             CLHEP Matrix component library (SHARED)
#  RandomObjects      CLHEP RandomObjects component library (SHARED)
#  Cast               CLHEP Cast component library (SHARED)
#  RefCount           CLHEP RefCount component library (SHARED)
#  Exceptions         CLHEP Exceptions component library (SHARED)
#

# ===========================================================================
# Variables used by this module which can change the default behaviour of
# this module. They need to be set prior to the call to find_package
#
# CLHEP_CONFIG_DEBUG - If set, this will enable some output from this module
#                      to help in debugging its behaviour
#
#----------------------------------------------------------------------------

# ---------------------------------------------------------------------------
# Print out values of the variables that we expect find_package to have passed
# to us. This is useful for developers of CLHEPConfig!
#
if(CLHEP_CONFIG_DEBUG)
  message(STATUS "CLHEPDebug : CLHEP_VERSION         = ${CLHEP_VERSION}")
  message(STATUS "CLHEPDebug : CLHEP_FIND_VERSION    = ${CLHEP_FIND_VERSION}")
  message(STATUS "CLHEPDebug : CLHEP_FIND_REQUIRED   = ${CLHEP_FIND_REQUIRED}")
  message(STATUS "CLHEPDebug : CLHEP_FIND_QUIETLY    = ${CLHEP_FIND_QUIETLY}")

  message(STATUS "CLHEPDebug : CLHEP_FIND_COMPONENTS = ${CLHEP_FIND_COMPONENTS}")

  foreach(_cpt ${CLHEP_FIND_COMPONENTS})
      message(STATUS "CLHEPDebug : CLHEP_FIND_REQUIRED_${_cpt} = ${CLHEP_FIND_REQUIRED_${_cpt}}")
  endforeach()
endif() # end of debugging

#----------------------------------------------------------------------------
# Locate ourselves, since all our config files should have been installed
# alongside us...
#
get_filename_component(_thisdir "${CMAKE_CURRENT_LIST_FILE}" PATH)


#----------------------------------------------------------------------------
# Configure the path to the CLHEP headers, using a relative path if possible.
# This is only known at CMake time, so expand a CMake supplied variable
# CLHEP has a nice simple header structure.
@CLHEP_INCLUDE_DIR_SETUP@

#----------------------------------------------------------------------------
# Construct the overall include path for using CLHEP
#
set(CLHEP_INCLUDE_DIRS ${CLHEP_INCLUDE_DIR})

#----------------------------------------------------------------------------
# Set the compile definitions required to use CLHEP
# We don't really need this for now.
set(CLHEP_DEFINITIONS @CLHEP_DEFINITIONS@)


#----------------------------------------------------------------------------
# Include the file listing all the imported targets.
# This is installed in the same location as us...
#
include("${_thisdir}/CLHEPLibraryDepends.cmake")

#----------------------------------------------------------------------
# - Handle shared vs static - default to shared if user didn't specify
#   This is actually very simple because we always build both!
set(CLHEP_KNOWN_COMPONENTS "@CLHEP_libraries@")

# Only allow single library variant to be used to populate CLHEP_LIBRARIES
if(DEFINED CLHEP_FIND_REQUIRED_static AND NOT CLHEP_LIBRARIES)
  list(REMOVE_ITEM CLHEP_FIND_COMPONENTS static)
  set(__clhep_lib_suffix "S")
endif()

foreach(__clhep_component_lib ${CLHEP_KNOWN_COMPONENTS})
  if(DEFINED CLHEP_FIND_REQUIRED_${__clhep_component_lib})
    list(REMOVE_ITEM CLHEP_FIND_COMPONENTS ${__clhep_component_lib})
    list(APPEND CLHEP_LIBRARIES CLHEP::${__clhep_component_lib}${__clhep_lib_suffix})
  endif()
endforeach()

# If CLHEP_LIBRARIES is empty at this point, then the complete lib is
# needed
if(NOT CLHEP_LIBRARIES)
  set(CLHEP_LIBRARIES CLHEP::CLHEP${__clhep_lib_suffix})
endif()

#-----------------------------------------------------------------------
# Finally, handle any remaining components.
# We should have dealt with all available components above, except for
# ui_all and vis_all, and removed them from the list of FIND_COMPONENTS
# so any left  we either didn't find or don't know about. Emit a warning
# if REQUIRED isn't set, or FATAL_ERROR otherwise
#
list(REMOVE_DUPLICATES CLHEP_FIND_COMPONENTS)

foreach(_remaining ${CLHEP_FIND_COMPONENTS})
  if(CLHEP_FIND_REQUIRED)
    message(FATAL_ERROR "CLHEP component ${_remaining} not found")
  elseif(NOT CLHEP_FIND_QUIETLY)
    message(WARNING "CLHEP component ${_remaining} not found")
  endif()
  unset(CLHEP_FIND_REQUIRED_${_remaining})
endforeach()

# And we should be good to go...
